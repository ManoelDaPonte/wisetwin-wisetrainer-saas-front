// Définition de la source de données
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Définition du générateur de client
generator client {
    provider = "prisma-client-js"
}

// Modèle utilisateur
model User {
    id               String               @id @default(uuid())
    auth0Id          String               @unique // Identifiant Auth0 de l'utilisateur
    email            String               @unique
    name             String?
    azureContainer   String? // Nom du container Azure de l'utilisateur
    createdAt        DateTime             @default(now())
    updatedAt        DateTime             @updatedAt
    userCourses      UserCourse[] // Relation avec les cours suivis
    userResponses    UserResponse[] // Réponses aux questionnaires
    userAchievements UserAchievement[] // Accomplissements débloqués
    userStats        UserStats? // Statistiques de l'utilisateur
    UserSession      UserSession[]
    organizations    OrganizationMember[]
    tags             UserTag[] // Tags associés à l'utilisateur
}

// Modèle de cours de formation
model Course {
    id                   String                 @id @default(uuid())
    courseId             String // Identifiant externe (ex: "wisetrainer-template")
    name                 String // Nom du cours
    description          String // Description du cours
    imageUrl             String? // URL de l'image du cours
    category             String // Catégorie (ex: "Sécurité")
    difficulty           String // Niveau de difficulté (ex: "Intermédiaire")
    duration             String // Durée estimée (ex: "30 min")
    sourceType           String? // "organization" ou "wisetwin"
    sourceOrganizationId String? // ID de l'organisation source si applicable
    createdAt            DateTime               @default(now())
    updatedAt            DateTime               @updatedAt
    modules              Module[] // Modules du cours
    userCourses          UserCourse[] // Utilisateurs inscrits à ce cours
    userSessions         UserSession[] // Sessions des utilisateurs liées à ce cours
    OrganizationTraining OrganizationTraining[]
    TagTraining          TagTraining[]

    // Contrainte pour garantir l'unicité d'un cours par combinaison courseId/source
    @@unique([courseId, sourceType, sourceOrganizationId])
}

// Modèle de progression d'un utilisateur dans un cours (mise à jour)
model UserCourse {
    id           String       @id @default(uuid())
    userId       String // Référence à l'utilisateur
    user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    courseId     String // Référence au cours
    course       Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
    progress     Int          @default(0) // Pourcentage de progression globale
    lastAccessed DateTime     @default(now()) // Dernière fois que l'utilisateur a accédé au cours
    startedAt    DateTime     @default(now()) // Date de début du cours
    completedAt  DateTime? // Date de fin du cours (null si non terminé)
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    userModules  UserModule[] // Progression dans les modules

    // Un utilisateur ne peut être inscrit qu'une fois à un cours précis
    @@unique([userId, courseId])
}

// Modèle de module (partie d'un cours)
model Module {
    id          String       @id @default(uuid())
    moduleId    String // Identifiant externe (ex: "pressure-risk")
    courseId    String // Référence au cours parent
    course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
    title       String // Titre du module
    description String // Description du module
    order       Int // Ordre d'affichage dans le cours
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    scenarios   Scenario[] // Scénarios du module
    userModules UserModule[] // Progression des utilisateurs dans ce module

    @@unique([courseId, moduleId]) // Un moduleId doit être unique dans un cours
}

// Modèle de scénario (peut contenir plusieurs questions)
model Scenario {
    id            String         @id @default(uuid())
    scenarioId    String // Identifiant externe du scénario
    moduleId      String // Référence au module parent
    module        Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
    title         String // Titre du scénario
    description   String // Description du scénario
    questions     Question[] // Questions du scénario
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    userResponses UserResponse[] // Réponses des utilisateurs

    @@unique([moduleId, scenarioId])
}

// Modèle de question
model Question {
    id          String   @id @default(uuid())
    questionId  String // Identifiant externe de la question
    scenarioId  String // Référence au scénario parent
    scenario    Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
    text        String // Texte de la question
    type        String   @default("SINGLE") // Type de question: SINGLE ou MULTIPLE
    explanation String? // Explication de la réponse correcte
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    options     Option[] // Options de réponse

    @@unique([scenarioId, questionId])
}

// Modèle d'option de réponse
model Option {
    id         String   @id @default(uuid())
    optionId   String // Identifiant externe de l'option
    questionId String // Référence à la question parent
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    text       String // Texte de l'option
    isCorrect  Boolean  @default(false) // Indique si l'option est correcte
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([questionId, optionId])
}

// Modèle de progression d'un utilisateur dans un module
model UserModule {
    id           String     @id @default(uuid())
    userCourseId String // Référence à la progression du cours parent
    userCourse   UserCourse @relation(fields: [userCourseId], references: [id], onDelete: Cascade)
    moduleId     String // Référence au module
    module       Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
    completed    Boolean    @default(false) // Indique si le module est complété
    score        Int        @default(0) // Score obtenu (0-100)
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt

    @@unique([userCourseId, moduleId]) // Un module ne peut être suivi qu'une fois par utilisateur et par cours
}

// Modèle pour stocker les réponses des utilisateurs aux questionnaires
model UserResponse {
    id              String   @id @default(uuid())
    userId          String // Référence à l'utilisateur
    user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    scenarioId      String // Référence au scénario
    scenario        Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
    questionId      String // ID de la question
    selectedAnswers String[] // IDs des options sélectionnées
    isCorrect       Boolean // Indique si la réponse est correcte
    score           Int // Score obtenu pour cette réponse
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

// Modèle d'accomplissement/réalisation
model Achievement {
    id               String            @id @default(uuid())
    achievementId    String            @unique // Identifiant externe de l'accomplissement
    title            String // Titre de l'accomplissement
    description      String // Description de l'accomplissement
    iconName         String // Nom de l'icône à utiliser
    criteria         String // Critères pour débloquer (JSON)
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
    userAchievements UserAchievement[] // Relation avec les utilisateurs qui ont débloqué cet accomplissement
}

// Modèle de relation entre utilisateur et accomplissement
model UserAchievement {
    id            String      @id @default(uuid())
    userId        String // Référence à l'utilisateur
    user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievementId String // Référence à l'accomplissement
    achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
    unlockedAt    DateTime    @default(now()) // Date à laquelle l'accomplissement a été débloqué
    data          String? // Données supplémentaires au format JSON (ex: score, contexte)
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt

    @@unique([userId, achievementId]) // Un utilisateur ne peut débloquer un accomplissement qu'une fois
}

// Modèle de statistiques utilisateur
model UserStats {
    id                String   @id @default(uuid())
    userId            String   @unique // Référence à l'utilisateur
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    totalTimeSpent    Int      @default(0) // Temps total passé en minutes
    sessionsCompleted Int      @default(0) // Nombre de sessions complétées
    questionsAnswered Int      @default(0) // Nombre total de questions répondues
    correctAnswers    Int      @default(0) // Nombre de réponses correctes
    lastActivity      DateTime @default(now()) // Dernière activité
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
}

model UserSession {
    id            String    @id @default(uuid())
    userId        String // Référence à l'utilisateur
    user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    startTime     DateTime  @default(now()) // Début de la session
    endTime       DateTime? // Fin de la session (null si encore active)
    duration      Int? // Durée en minutes (calculée à la fin de la session)
    courseId      String? // ID du cours si la session concerne un cours spécifique
    course        Course?   @relation(fields: [courseId], references: [id])
    modulesViewed String? // Liste des modules vus durant la session (JSON)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model Organization {
    id             String   @id @default(uuid())
    name           String
    description    String?
    logoUrl        String?
    azureContainer String? // Container Azure pour stocker les formations spécifiques à l'organisation
    isActive       Boolean  @default(true)
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    // Relations
    members     OrganizationMember[]
    trainings   OrganizationTraining[]
    invitations OrganizationInvitation[]
    tags        OrganizationTag[] // Relation with tags
}

// Modèle pour gérer les membres d'une organisation
model OrganizationMember {
    id             String       @id @default(uuid())
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    userId         String
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    role           String // "OWNER", "ADMIN", "MEMBER"
    joinedAt       DateTime     @default(now())
    updatedAt      DateTime     @updatedAt

    @@unique([organizationId, userId])
}

// Modèle pour gérer les formations associées à une organisation
model OrganizationTraining {
    id             String       @id @default(uuid())
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    courseId       String
    course         Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
    buildId        String? // Identifiant du build Unity dans le container Azure
    isCustomBuild  Boolean      @default(false) // Indique si c'est un build personnalisé pour l'organisation
    isActive       Boolean      @default(true)
    assignedAt     DateTime     @default(now())
    updatedAt      DateTime     @updatedAt

    @@unique([organizationId, courseId])
}

model OrganizationInvitation {
    id             String       @id @default(uuid())
    email          String
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    inviteCode     String       @unique // Code unique pour l'invitation
    role           String       @default("MEMBER") // MEMBER, ADMIN
    status         String       @default("PENDING") // PENDING, ACCEPTED, REJECTED, EXPIRED
    invitedBy      String // ID de l'utilisateur qui a fait l'invitation
    invitedAt      DateTime     @default(now())
    expiresAt      DateTime // Date d'expiration de l'invitation
    updatedAt      DateTime     @updatedAt

    @@unique([email, organizationId]) // Un utilisateur ne peut être invité qu'une fois dans une organisation
}

// Modèle pour les tags d'organisation
model OrganizationTag {
    id             String       @id @default(uuid())
    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    name           String
    color          String?      @default("#3B82F6") // Couleur par défaut (bleu)
    description    String?
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt

    // Relations
    users     UserTag[]
    trainings TagTraining[]

    @@unique([organizationId, name])
}

// Relation entre utilisateurs et tags
model UserTag {
    id         String          @id @default(uuid())
    userId     String
    user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    tagId      String
    tag        OrganizationTag @relation(fields: [tagId], references: [id], onDelete: Cascade)
    assignedAt DateTime        @default(now())

    @@unique([userId, tagId])
}

// Relation entre tags et formations
model TagTraining {
    id         String          @id @default(uuid())
    tagId      String
    tag        OrganizationTag @relation(fields: [tagId], references: [id], onDelete: Cascade)
    courseId   String
    course     Course          @relation(fields: [courseId], references: [id], onDelete: Cascade)
    assignedAt DateTime        @default(now())

    @@unique([tagId, courseId])
}
