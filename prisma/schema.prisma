// Définition de la source de données
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Définition du générateur de client
generator client {
    provider = "prisma-client-js"
}

// Modèle utilisateur
model User {
    id             String         @id @default(uuid())
    auth0Id        String         @unique // Identifiant Auth0 de l'utilisateur
    email          String         @unique
    name           String?
    azureContainer String? // Nom du container Azure de l'utilisateur
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    userCourses    UserCourse[] // Relation avec les cours suivis
    userResponses  UserResponse[] // Réponses aux questionnaires
}

// Modèle de cours de formation
model Course {
    id          String       @id @default(uuid())
    courseId    String       @unique // Identifiant externe (ex: "wisetrainer-template")
    name        String // Nom du cours
    description String // Description du cours
    imageUrl    String? // URL de l'image du cours
    category    String // Catégorie (ex: "Sécurité")
    difficulty  String // Niveau de difficulté (ex: "Intermédiaire")
    duration    String // Durée estimée (ex: "30 min")
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    modules     Module[] // Modules du cours
    userCourses UserCourse[] // Utilisateurs inscrits à ce cours
}

// Modèle de module (partie d'un cours)
model Module {
    id          String       @id @default(uuid())
    moduleId    String // Identifiant externe (ex: "pressure-risk")
    courseId    String // Référence au cours parent
    course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
    title       String // Titre du module
    description String // Description du module
    order       Int // Ordre d'affichage dans le cours
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    scenarios   Scenario[] // Scénarios du module
    userModules UserModule[] // Progression des utilisateurs dans ce module

    @@unique([courseId, moduleId]) // Un moduleId doit être unique dans un cours
}

// Modèle de scénario (peut contenir plusieurs questions)
model Scenario {
    id            String         @id @default(uuid())
    scenarioId    String // Identifiant externe du scénario
    moduleId      String // Référence au module parent
    module        Module         @relation(fields: [moduleId], references: [id], onDelete: Cascade)
    title         String // Titre du scénario
    description   String // Description du scénario
    questions     Question[] // Questions du scénario
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    userResponses UserResponse[] // Réponses des utilisateurs

    @@unique([moduleId, scenarioId])
}

// Modèle de question
model Question {
    id          String   @id @default(uuid())
    questionId  String // Identifiant externe de la question
    scenarioId  String // Référence au scénario parent
    scenario    Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
    text        String // Texte de la question
    type        String   @default("SINGLE") // Type de question: SINGLE ou MULTIPLE
    explanation String? // Explication de la réponse correcte
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    options     Option[] // Options de réponse

    @@unique([scenarioId, questionId])
}

// Modèle d'option de réponse
model Option {
    id         String   @id @default(uuid())
    optionId   String // Identifiant externe de l'option
    questionId String // Référence à la question parent
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    text       String // Texte de l'option
    isCorrect  Boolean  @default(false) // Indique si l'option est correcte
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@unique([questionId, optionId])
}

// Modèle de progression d'un utilisateur dans un cours
model UserCourse {
    id           String       @id @default(uuid())
    userId       String // Référence à l'utilisateur
    user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    courseId     String // Référence au cours
    course       Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
    progress     Int          @default(0) // Pourcentage de progression globale
    lastAccessed DateTime     @default(now()) // Dernière fois que l'utilisateur a accédé au cours
    startedAt    DateTime     @default(now()) // Date de début du cours
    completedAt  DateTime? // Date de fin du cours (null si non terminé)
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    userModules  UserModule[] // Progression dans les modules

    @@unique([userId, courseId]) // Un utilisateur ne peut être inscrit qu'une fois à un cours
}

// Modèle de progression d'un utilisateur dans un module
model UserModule {
    id           String     @id @default(uuid())
    userCourseId String // Référence à la progression du cours parent
    userCourse   UserCourse @relation(fields: [userCourseId], references: [id], onDelete: Cascade)
    moduleId     String // Référence au module
    module       Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
    completed    Boolean    @default(false) // Indique si le module est complété
    score        Int        @default(0) // Score obtenu (0-100)
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt

    @@unique([userCourseId, moduleId]) // Un module ne peut être suivi qu'une fois par utilisateur et par cours
}

// Modèle pour stocker les réponses des utilisateurs aux questionnaires
model UserResponse {
    id              String   @id @default(uuid())
    userId          String // Référence à l'utilisateur
    user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    scenarioId      String // Référence au scénario
    scenario        Scenario @relation(fields: [scenarioId], references: [id], onDelete: Cascade)
    questionId      String // ID de la question
    selectedAnswers String[] // IDs des options sélectionnées
    isCorrect       Boolean // Indique si la réponse est correcte
    score           Int // Score obtenu pour cette réponse
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}
